type Product {
    id: ID
    title: String
    model: String
    color: String
    inStock: Int
    inDelivery: Int
    width: Int
    length: Int
    height: Int
    imagePath: String
}

enum Order {
    ASC
    DESC
    EQ
}

input FilterProductsBy {
    field: String!
    order: Order!
    value: String!
}

input SortProductsBy {
    field: String!
    order: Order!
}

type Query {
    getProduct(id: ID!): Product
    getAllProducts: [Product]
    getFilteredProducts(filterBy: [FilterProductsBy]!, sortBy: [SortProductsBy]): [Product]
    getSortedProducts(sortBy: [SortProductsBy]!, filterBy: [FilterProductsBy]): [Product]
}

input ProductInput {
    title: String!
    color: String!
    model: String
    inStock: Int
    inDelivery: Int
    width: Int
    length: Int
    height: Int
    imagePath: String
}

input ProductUpdateInput {
    id: ID!
    title: String
    color: String
    model: String
    inStock: Int
    inDelivery: Int
    width: Int
    length: Int
    height: Int
    imagePath: String
}

type Mutation {
    createProduct(product: ProductInput!): Product
    updateProduct(product: ProductUpdateInput!): Product
    deleteProduct(id: ID!): Product
}